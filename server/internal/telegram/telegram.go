package telegram

import (
	"bytes"
	"fmt"
	"github.com/call-me-snake/service_tg_bot/server/internal/model"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sirupsen/logrus"
	"log"
	"strconv"
	"text/tabwriter"
	"time"
)

const (
	greetMessage = `–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.
–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É devices. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É,
–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ id –Ω–æ–º–µ—Ä–æ–º, –ª–∏–±–æ –≤–≤–µ–¥–∏ –µ–≥–æ id.`
	helpMessage = "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É devices. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É," +
		"\n–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É —Å –µ–≥–æ id –Ω–æ–º–µ—Ä–æ–º, –ª–∏–±–æ –≤–≤–µ–¥–∏ –µ–≥–æ id."
	incorrectInputMessage  = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–≤–æ–¥ id —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—ã */start*, */help*"
	markdownParseMode      = "Markdown"
	storageConnectionError = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
	internalError          = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"
	onlineStatus           = "üôÇ"
	offlineStatus          = "üò¥"
)

var deviceKeyboard = tgbotapi.InlineKeyboardMarkup{
	InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "devices")),
	},
}

func StartBot(botToken string, storage model.IClientDeviceStorage, logger logrus.FieldLogger) error {
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		return fmt.Errorf("telegram.StartBot: %v", err)
	}

	bot.Debug = true

	logger.Info(fmt.Sprintf("Authorized on account %s", bot.Self.UserName))

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {

		var msg tgbotapi.MessageConfig

		if update.CallbackQuery != nil {
			switch update.CallbackQuery.Data {
			case "devices":
				msg = getDevicesList(update, storage, logger)
			case "back":
				msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), "back")
			default:
				id, err := strconv.Atoi(update.CallbackQuery.Data)
				if err != nil {
					logger.Error(fmt.Sprintf("StartBot: invalid callbackQuery.Data: %s", update.CallbackQuery.Data))
					msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), internalError)
				} else {
					msg = getDeviceInfoById(id, int64(update.CallbackQuery.From.ID), storage)
				}
			}
		} else if update.Message != nil {
			switch update.Message.Text {
			case "/start":
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, greetMessage)
				msg.ReplyMarkup = deviceKeyboard
			case "/help":
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, helpMessage)
				msg.ReplyMarkup = deviceKeyboard
			default:
				id, err := strconv.Atoi(update.Message.Text)
				if err != nil {
					log.Printf("StartBot: ")
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, incorrectInputMessage)
					msg.ParseMode = markdownParseMode
				} else {
					msg = getDeviceInfoById(id, update.Message.Chat.ID, storage)
				}
			}
		}

		_, err = bot.Send(msg)
		if err != nil {
			logrus.Error(fmt.Errorf("StartBot: %v", err))
		}
	}

	_, err = bot.AnswerCallbackQuery(tgbotapi.CallbackConfig{})
	if err != nil {
		logger.Error(fmt.Errorf("StartBot: %v", err))
	}
	return nil
}

func getDevicesList(update tgbotapi.Update, storage model.IClientDeviceStorage, logger logrus.FieldLogger) (msg tgbotapi.MessageConfig) {
	fmt.Println("–ó–∞—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é getDevicesList")
	devices, err := storage.GetDeviceInfoList()
	if err != nil {
		msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), storageConnectionError)
		return
	}
	if devices == nil {
		msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
		return
	}
	//–°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 99 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ + –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
	idKeyboard := tgbotapi.InlineKeyboardMarkup{}
	idRowCap := 8
	idRow := make([]tgbotapi.InlineKeyboardButton, 0, idRowCap)

	//–°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
	var buf bytes.Buffer
	w := tabwriter.NewWriter(&buf, 10, 0, 1, ' ', tabwriter.AlignRight)
	_, err = fmt.Fprintln(w, "```\n–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\nID\t–ò–º—è\t–°—Ç–∞—Ç—É—Å\t")
	if err != nil {
		log.Print(err)
		msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
	}
	for i, device := range devices {
		if i < 99 {
			idButton := tgbotapi.NewInlineKeyboardButtonData(strconv.Itoa(int(device.Id)), strconv.Itoa(int(device.Id)))
			if len(idRow) == idRowCap {
				idKeyboard.InlineKeyboard = append(idKeyboard.InlineKeyboard, idRow)
				idRow = make([]tgbotapi.InlineKeyboardButton, 0, idRowCap)
			}
			idRow = append(idRow, idButton)
		}

		var statusMsg string
		if device.Online {
			statusMsg = onlineStatus
		} else {
			statusMsg = offlineStatus
		}
		_, err = fmt.Fprintf(w, "%d\t%s\t%s\t\n", device.Id, device.Name, statusMsg)
		if err != nil {
			logger.Error(fmt.Errorf("getDevicesList: %v", err))
		}
	}
	_, err = fmt.Fprintln(w, "```")
	if err != nil {
		logger.Error(fmt.Errorf("getDevicesList: %v", err))
	}
	err = w.Flush()
	if err != nil {
		logger.Error(fmt.Errorf("getDevicesList: %v", err))
	}

	if len(idRow) > 0 {
		idKeyboard.InlineKeyboard = append(idKeyboard.InlineKeyboard, idRow)
	}
	//–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
	idKeyboard.InlineKeyboard = append(idKeyboard.InlineKeyboard, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", "devices"),
	})
	s := string(buf.Bytes())
	fmt.Println(s)
	msg = tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID), s)
	msg.ParseMode = markdownParseMode
	msg.ReplyMarkup = idKeyboard
	return
}

func getDeviceInfoById(deviceId int, userId int64, storage model.IClientDeviceStorage) (msg tgbotapi.MessageConfig) {
	device, err := storage.GetDeviceInfo(int64(deviceId))
	if err != nil {
		log.Printf("getDeviceInfoById: %v", err)
		msg = tgbotapi.NewMessage(userId, storageConnectionError)
	} else if device == nil {
		msg = tgbotapi.NewMessage(userId, fmt.Sprintf("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å id: %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", deviceId))

	} else {
		createdTimeMsg := device.CreatedAt.Format(time.RFC1123)
		var statusMsg string
		if device.Online {
			statusMsg = onlineStatus
		} else {
			statusMsg = offlineStatus
		}
		msg = tgbotapi.NewMessage(userId, fmt.Sprintf("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %d:\n–ò–º—è: %s\n–¢–æ–∫–µ–Ω: %s\n–°–æ–∑–¥–∞–Ω: %s\n–û–Ω–ª–∞–π–Ω: %s",
			device.Id, device.Name, device.Token, createdTimeMsg, statusMsg))
	}
	msg.ReplyMarkup = deviceKeyboard
	return
}
